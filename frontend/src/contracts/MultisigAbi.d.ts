/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.35.0
  Forc version: 0.35.3
  Fuel-Core version: 0.17.3
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Enum } from "./common";

export type ErrorInput = Enum<{ NotInitialized: [], AlreadyInitialized: [], NotValidThreshold: [], UserNotFound: [], NotEnoughFunds: [], ProposalFinished: [] }>;
export type ErrorOutput = ErrorInput;
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;

interface MultisigAbiInterface extends Interface {
  functions: {
    constructor: FunctionFragment;
    deposit: FunctionFragment;
    get_threshold: FunctionFragment;
    proposal: FunctionFragment;
    vote: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'constructor', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'deposit', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_threshold', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'proposal', values: [ContractIdInput, IdentityInput, BigNumberish, string]): Uint8Array;
  encodeFunctionData(functionFragment: 'vote', values: [string, boolean]): Uint8Array;

  decodeFunctionData(functionFragment: 'constructor', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'deposit', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_threshold', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'proposal', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'vote', data: BytesLike): DecodedValue;
}

export class MultisigAbi extends Contract {
  interface: MultisigAbiInterface;
  functions: {
    constructor: InvokeFunction<[threshold: BigNumberish], void>;
    deposit: InvokeFunction<[], void>;
    get_threshold: InvokeFunction<[], BN>;
    proposal: InvokeFunction<[tokenId: ContractIdInput, to: IdentityInput, amount: BigNumberish, description: string], void>;
    vote: InvokeFunction<[transaction: string, approve: boolean], void>;
  };
}
